package be.orbinson.sling.observability.weavinghooks.logmethod;

import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.ConfigurationPolicy;
import org.osgi.service.metatype.annotations.AttributeDefinition;
import org.osgi.service.metatype.annotations.Designate;
import org.osgi.service.metatype.annotations.ObjectClassDefinition;

@Component(
        configurationPolicy = ConfigurationPolicy.REQUIRE,
        service = LogMethodWeavingHookConfiguration.class,
        immediate = true
)
@Designate(
        ocd = LogMethodWeavingHookConfiguration.Config.class,
        factory = true
)
public class LogMethodWeavingHookConfiguration {

    @ObjectClassDefinition(name = "Sling Observability Weaving Hooks - Log Method Weaving Hook Configuration")
    @interface Config {
        @AttributeDefinition(description = "Class name where you want to add a dynamic log method")
        String className();

        @AttributeDefinition(description = "Method name")
        String methodName();

        @AttributeDefinition(description = "Log level")
        String logLevel() default "info";

        @AttributeDefinition(description = "Enable the trace visitor to show what the generated byte code is")
        boolean showGeneratedBytecode() default false;
    }

    private String className;
    private String methodName;
    private String logLevel;
    private boolean enableTraceVisitor;

    @Activate
    void activate(Config config) {
        this.className = config.className();
        this.methodName = config.methodName();
        this.logLevel = config.logLevel();
        this.enableTraceVisitor = config.showGeneratedBytecode();
    }

    public String getClassName() {
        return className;
    }

    public String getMethodName() {
        return methodName;
    }

    public String getLogLevel() {
        return logLevel;
    }

    public boolean isEnableTraceVisitor() {
        return enableTraceVisitor;
    }
}
